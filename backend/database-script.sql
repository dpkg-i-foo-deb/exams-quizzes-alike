-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.

BEGIN;


CREATE TABLE IF NOT EXISTS public.administrador
(
    login_persona character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT administrador_pkey PRIMARY KEY (login_persona)
);

CREATE TABLE IF NOT EXISTS public.categoria_examen
(
    codigo_categoria integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT categoria_examen_pkey PRIMARY KEY (codigo_categoria)
);

CREATE TABLE IF NOT EXISTS public.curso
(
    codigo_curso integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_espacio integer NOT NULL,
    codigo_docente character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT curso_pkey PRIMARY KEY (codigo_curso)
);

CREATE TABLE IF NOT EXISTS public.curso_estudiante
(
    codigo_estudiante character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_curso integer NOT NULL,
    codigo_matricula integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    CONSTRAINT curso_estudiante_pkey PRIMARY KEY (codigo_matricula)
);

COMMENT ON TABLE public.curso_estudiante
    IS 'Utilizado para representar la matrícula de un estudiante a un curso';

CREATE TABLE IF NOT EXISTS public.docente
(
    login_persona character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT docente_pkey PRIMARY KEY (login_persona)
);

COMMENT ON TABLE public.docente
    IS 'Utilizado para guardar los docentes en la base de datos';

CREATE TABLE IF NOT EXISTS public.espacio_academico
(
    codigo_espacio integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying(200) COLLATE pg_catalog."default" NOT NULL,
    codigo_plan integer NOT NULL,
    CONSTRAINT espacio_academico_pkey PRIMARY KEY (codigo_espacio),
    CONSTRAINT plan_estudio_unique UNIQUE (codigo_plan)
);

CREATE TABLE IF NOT EXISTS public.estudiante
(
    login_persona character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT estudiante_pkey PRIMARY KEY (login_persona)
);

COMMENT ON TABLE public.estudiante
    IS 'Utilizado para modelar el rol de un estudiante en la base de datos';

CREATE TABLE IF NOT EXISTS public.examen
(
    codigo_examen integer NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1 MINVALUE 1  MAXVALUE 2147483647 CACHE 1 ),
    nota_maxima numeric NOT NULL,
    nota_minima numeric NOT NULL,
    peso_examen integer NOT NULL,
    cantidad_preguntas integer,
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    tiempo_limite time without time zone NOT NULL,
    codigo_categoria integer,
    codigo_docente character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT examen_pkey PRIMARY KEY (codigo_examen)
);

CREATE TABLE IF NOT EXISTS public.examen_tema
(
    codigo_examen integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    codigo_tema integer NOT NULL,
    CONSTRAINT examen_tema_pkey PRIMARY KEY (codigo_examen, codigo_tema)
);

CREATE TABLE IF NOT EXISTS public.horario
(
    aula character varying COLLATE pg_catalog."default" NOT NULL,
    dia character varying COLLATE pg_catalog."default" NOT NULL,
    hora_inicio character varying COLLATE pg_catalog."default" NOT NULL,
    hora_fin character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_curso integer NOT NULL,
    CONSTRAINT horario_pkey PRIMARY KEY (aula, dia, hora_inicio, hora_fin, codigo_curso)
);

CREATE TABLE IF NOT EXISTS public.opcion
(
    codigo_opcion integer NOT NULL,
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    respuesta_correcta character varying COLLATE pg_catalog."default" NOT NULL,
    palabra_faltante character varying COLLATE pg_catalog."default",
    orden integer,
    pareja character varying COLLATE pg_catalog."default",
    CONSTRAINT opcion_pkey PRIMARY KEY (codigo_opcion)
);

CREATE TABLE IF NOT EXISTS public.persona
(
    login character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT persona_pkey PRIMARY KEY (login)
);

COMMENT ON TABLE public.persona
    IS 'Utilizado para almacenar el login y contraseña de una persona';

CREATE TABLE IF NOT EXISTS public.plan_estudio
(
    codigo_plan integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT plan_estudio_pkey PRIMARY KEY (codigo_plan)
);

CREATE TABLE IF NOT EXISTS public.pregunta
(
    codigo_pregunta integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "isPublic" boolean NOT NULL,
    tipo character varying COLLATE pg_catalog."default" NOT NULL,
    "isFather" boolean NOT NULL,
    peso numeric NOT NULL,
    enunciado character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_subpregunta integer,
    codigo_docente character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_tema integer,
    CONSTRAINT pregunta_pkey PRIMARY KEY (codigo_pregunta)
);

CREATE TABLE IF NOT EXISTS public.pregunta_examen
(
    codigo_pregunta integer NOT NULL,
    codigo_examen integer NOT NULL,
    codigo_pregunta_examen integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    CONSTRAINT pregunta_examen_pkey PRIMARY KEY (codigo_pregunta_examen)
);

CREATE TABLE IF NOT EXISTS public.pregunta_presentacion
(
    codigo_presentacion integer NOT NULL,
    codigo_pregunta_examen integer NOT NULL,
    codigo_pregunta_presentacion integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    codigo_opcion integer,
    respuesta character varying,
    CONSTRAINT pregunta_presentacion_pkey PRIMARY KEY (codigo_pregunta_presentacion)
);

CREATE TABLE IF NOT EXISTS public.presentacion_examen
(
    codigo_matricula integer NOT NULL,
    codigo_examen integer NOT NULL,
    nota_examen numeric,
    codigo_presentacion integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    CONSTRAINT presentacion_examen_pkey PRIMARY KEY (codigo_presentacion)
);

CREATE TABLE IF NOT EXISTS public.curso_examen
(
    codigo_curso_examen integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    codigo_examen integer NOT NULL,
    codigo_curso integer NOT NULL,
    fecha_presentacion timestamp without time zone NOT NULL,
    CONSTRAINT curso_examen_pkey PRIMARY KEY (codigo_curso_examen)
);

CREATE TABLE IF NOT EXISTS public.tema
(
    codigo_tema integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_unidad integer NOT NULL,
    CONSTRAINT tema_pkey PRIMARY KEY (codigo_tema)
);

CREATE TABLE IF NOT EXISTS public.unidad
(
    codigo_unidad integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    descripcion character varying COLLATE pg_catalog."default" NOT NULL,
    codigo_plan integer NOT NULL,
    CONSTRAINT unidad_pkey PRIMARY KEY (codigo_unidad)
);

ALTER TABLE IF EXISTS public.administrador
    ADD CONSTRAINT login_persona_fk FOREIGN KEY (login_persona)
    REFERENCES public.persona (login) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS administrador_pkey
    ON public.administrador(login_persona);


ALTER TABLE IF EXISTS public.curso
    ADD CONSTRAINT docente_fk FOREIGN KEY (codigo_docente)
    REFERENCES public.docente (login_persona) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.curso
    ADD CONSTRAINT espacio_academico_fk FOREIGN KEY (codigo_espacio)
    REFERENCES public.espacio_academico (codigo_espacio) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.curso_estudiante
    ADD CONSTRAINT codigo_curso_fk FOREIGN KEY (codigo_curso)
    REFERENCES public.curso (codigo_curso) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.curso_estudiante
    ADD CONSTRAINT codigo_estudiante_fk FOREIGN KEY (codigo_estudiante)
    REFERENCES public.estudiante (login_persona) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.docente
    ADD CONSTRAINT login_persona_fk FOREIGN KEY (login_persona)
    REFERENCES public.persona (login) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

COMMENT ON CONSTRAINT login_persona_fk ON public.docente
    IS 'Utilizado para relacionar a este docente con su login';

CREATE INDEX IF NOT EXISTS docente_pkey
    ON public.docente(login_persona);


ALTER TABLE IF EXISTS public.espacio_academico
    ADD CONSTRAINT codigo_plan_fk FOREIGN KEY (codigo_plan)
    REFERENCES public.plan_estudio (codigo_plan) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS plan_estudio_unique
    ON public.espacio_academico(codigo_plan);


ALTER TABLE IF EXISTS public.estudiante
    ADD CONSTRAINT login_persona_fk FOREIGN KEY (login_persona)
    REFERENCES public.persona (login) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

COMMENT ON CONSTRAINT login_persona_fk ON public.estudiante
    IS 'Utilizado para almacenar el login del estudiante';

CREATE INDEX IF NOT EXISTS estudiante_pkey
    ON public.estudiante(login_persona);


ALTER TABLE IF EXISTS public.examen
    ADD CONSTRAINT categoria_fk FOREIGN KEY (codigo_categoria)
    REFERENCES public.categoria_examen (codigo_categoria) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.examen
    ADD CONSTRAINT docente_fk FOREIGN KEY (codigo_docente)
    REFERENCES public.docente (login_persona) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.examen_tema
    ADD CONSTRAINT "examen_FK" FOREIGN KEY (codigo_examen)
    REFERENCES public.examen (codigo_examen) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.examen_tema
    ADD CONSTRAINT "tema_FK" FOREIGN KEY (codigo_tema)
    REFERENCES public.tema (codigo_tema) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.horario
    ADD CONSTRAINT curso_fk FOREIGN KEY (codigo_curso)
    REFERENCES public.curso (codigo_curso) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.opcion
    ADD CONSTRAINT pregunta_fk FOREIGN KEY (codigo_opcion)
    REFERENCES public.pregunta (codigo_pregunta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS opcion_pkey
    ON public.opcion(codigo_opcion);


ALTER TABLE IF EXISTS public.pregunta
    ADD CONSTRAINT docente_fk FOREIGN KEY (codigo_docente)
    REFERENCES public.docente (login_persona) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta
    ADD CONSTRAINT subpregunta_fk FOREIGN KEY (codigo_subpregunta)
    REFERENCES public.pregunta (codigo_pregunta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta
    ADD CONSTRAINT tema_fk FOREIGN KEY (codigo_tema)
    REFERENCES public.tema (codigo_tema) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta_examen
    ADD CONSTRAINT examen_fk FOREIGN KEY (codigo_examen)
    REFERENCES public.examen (codigo_examen) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta_examen
    ADD CONSTRAINT pregunta_fk FOREIGN KEY (codigo_pregunta)
    REFERENCES public.pregunta (codigo_pregunta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta_presentacion
    ADD CONSTRAINT opcion_fk FOREIGN KEY (codigo_opcion)
    REFERENCES public.opcion (codigo_opcion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta_presentacion
    ADD CONSTRAINT pregunta_examen_fk FOREIGN KEY (codigo_pregunta_examen)
    REFERENCES public.pregunta_examen (codigo_pregunta_examen) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pregunta_presentacion
    ADD CONSTRAINT presentacion_fk FOREIGN KEY (codigo_presentacion)
    REFERENCES public.presentacion_examen (codigo_presentacion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.presentacion_examen
    ADD CONSTRAINT estudiante_fk FOREIGN KEY (codigo_matricula)
    REFERENCES public.curso_estudiante (codigo_matricula) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.curso_examen
    ADD CONSTRAINT curso_fk FOREIGN KEY (codigo_curso)
    REFERENCES public.curso (codigo_curso) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;



ALTER TABLE IF EXISTS public.curso_examen
    ADD CONSTRAINT examen_fk FOREIGN KEY (codigo_examen)
    REFERENCES public.examen (codigo_examen) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.presentacion_examen
    ADD CONSTRAINT examen_fk FOREIGN KEY (codigo_examen)
    REFERENCES public.examen (codigo_examen) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tema
    ADD CONSTRAINT unidad_fk FOREIGN KEY (codigo_unidad)
    REFERENCES public.unidad (codigo_unidad) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.unidad
    ADD CONSTRAINT plan_estudio_fk FOREIGN KEY (codigo_plan)
    REFERENCES public.plan_estudio (codigo_plan) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS public.presentacion_examen ADD fecha_presentacion date NULL;
ALTER TABLE IF EXISTS public.presentacion_examen ADD tiempo_presentacion time NULL;

END;